MySQL

sys  -  это схема со служебными объектами, без данной схемы СУБД работать не будет.
sakila и world - это схемы с объектами для обучения/примера. Можно посмотреть их структуру/наполнение и потренироваться  в написании запросов к ним, не создавая свои собственные объекты.

char - <количество символов> - может быть любым значением от 0 до 255.
В столбцах с типом CHAR могут храниться строки фиксированной длины, которая дополняется пробелами до значения <количество символов>. Тип CHAR может хранить до 255 байт.

varchar - <количество символов> - может быть любым значением от 0 до 65535.
В столбцах с типом VARCHAR могут храниться строки переменной длины, отличающиеся от типа CHAR тем, что не дополняется пробелами до максимальной длины. Максимальный размер до 65535 байт.

binary - с фиксированной длиной, строки дополняются нулевым байтом до максимальной длины. 
varbinary  хранит строки переменной длины, поэтому дополняться нулевыми байтами не будет.

Blob используется для хранения больших бинарных данных, таких как картинки.
Text предназначен также для хранения больших данных, но текстового содержания.

enum строковый объект со значением, выбранным из списка разрешенных значений, которые перечислены явно в спецификации столбца при создании таблицы.
set  строковый объект, у которого может быть ноль или больше значений, каждое из которых должно быть выбрано из списка разрешенных значений, определенных, когда таблица составлена. 

Числа с фиксированной точкой:
Decimal (<точность>, <масштаб>)
точность - общее количество разрядов. Если точность не указана, то по умолчанию это будет 10. Максимальное значение - 65.
масштаб - количество разрядов справа от десятичной точки. Значение по умолчанию для масштаба равно 0.

FLOAT(M,D), где M - общее количество цифр, а D - количество цифр после запятой. 
DOUBLE(M,D), где M - общее количество цифр, а D - количество цифр после запятой. Данный тип также имеет псевдонимы REAL и DOUBLE PRECISION, которые можно использовать вместо DOUBLE.

MySQL поддерживает стандартные типы целого числа INTEGER (или INT) и SMALLINT. Типы целого числа TINYINT, MEDIUMINT и BIGINT.

Тип битового значения BIT(<количество бит>). 
<количество бит> - может принимать значения от 1 до 64, по умолчанию - 8 бит.

Дата и время 
типы данных: DATE, DATETIME, TIMESTAMP, TIME, YEAR
DATE используется для значений с частью даты, но без части времени. Формат My SQL  'YYYY-MM-DD'.
DATETIME используется для значений с частями даты и времени. MySQL получает и выводит на экран значения DATETIME в формате 'YYYY-MM-DD HH:MI:SS'. Этот тип данных не зависит от временной зоны. Он всегда отображается ровно в таком виде, в котором был установлен и в котором хранится в базе данных.
TIMESTAMP используется для значений, которые содержат части даты и времени. TIMESTAMP имеет диапазон от '1970-01-01 00:00:01' UTC до '2038-01-19 03:14:07' UTC. При выборках отображается с учётом текущего часового пояса. В базе данных при создании записи с типом TIMESTAMP значение сохраняется по нулевому часовому поясу. 
MySQL получает и отображает значения TIME в формате 'HH:MI:SS' (или 'HHH:MI:SS' для больших значений часов). Значения TIME могут быть в диапазоне от '-838:59:59' до '838:59:59'.
Тип YEAR 1-байтовый тип, используемый, чтобы представить значения года. MySQL отображает YEAR в формате YYYY с диапазоном от 1901 до 2155 или 0000.

Правила целостности
Задаются условия, которым должны удовлетворять данные в базе. 
Ограничения на данные в пределах одной таблицы:
1. Запрет неопределенных значений (not null)
2. Уникальность значения (unique)
3. Первичный ключ (Primary key)
Кроме того, для ограничения ссылочной целостности существуют внешние ключи (foreign key).

Запрет неопределенных значений (NOT NULL):
NULL - это специальное значение, которое используется в SQL для обозначения отсутствия какого-либо значения в ячейке таблицы (! не равно 0).
NOT NULL - проверка на непустое значение.
Если таблица уже создана - применяем команду ALTER для изменения атрибутов столбца.
Функция COALESCE принимает список значений и возвращает первое из них, которое не равно NULL. Если все выражения будут иметь значение NULL, функция COALESCE вернет значение NULL.

Уникальное значение (UNIQUE), в таблице не может существовать двух строк с одинаковыми значениями столбца или набора столбцов. При этом неопределенные значения не считаются одинаковыми, то есть две или более строк со значениями NULL могут быть у столбца/столбцов, заявленные как UNIQUE.

Первичный ключ (PRIMARY KEY) - поле или комбинация полей в таблице, которое позволяет однозначно идентифицировать каждую запись в ней. 
Значение в столбце считается первичным ключом, если оно непустое (NOT NULL) и уникально в пределах столбца данной таблицы (UNIQUE). Первичный ключ может быть составным и представлять собой комбинацию столбцов. 

Внешний ключ (FOREIGN KEY) - это поле или набор полей, перечисленных через запятую, количество и типы данных которых совпадают с количеством и типом данных полей первичного ключа в родительской таблице.
FOREIGN KEY - оператор для создания внешнего ключа
REFERENCES  - ключевое слово, после которого указывается имя связанной(родительской) таблицы.

Атрибут столбца (AUTO_INCREMENT).
Значение данной колонки будет автоматически увеличиваться при добавлении новых записей в таблицу. Каждая таблица имеет максимум одну AUTO_INCREMENT колонку (можно применять только к целочисленным типам и к типам с плавающей запятой). 
Значение по умолчанию (DEFAULT)
Если при вставке строки значение для столбца с указанным DEFAULT не будет задано, то в него запишется значение по умолчанию.

Вставка данных осуществляется оператором INSERT.
В квадратных скобках [] указаны необязательные операторы/аргументы. Оператор INTO в MySQL не обязательно указывать, при его отсутствии оператор отработает корректно (в некоторых других СУБД, например Oracle, его нужно указывать). 
Если в скобках список_столбцов перечислены названия столбцов, то им присваиваются значения в соответствующем порядке в скобках после слова VALUES. 
Для остальных столбцов таблицы (если такие остались), будут присвоены значения по DEFAULT, если такие были объявлены, либо значение NULL.

WHERE <условие>
Данный оператор используется для фильтрации строк в результирующем наборе. Условия состоят из операторов сравнения.

SELECT используется для извлечения данных из одной или нескольких таблиц.
DISTINCT удаляет дубликаты из набора результата.
[WHERE <условие>] условия, которые должны быть выполнены для выбранных записей.
[GROUP BY <список_группировки>] собирает данные по нескольким записям и группирует результаты по одному или нескольким столбцам.
[HAVING <условие>] используется в сочетании с GROUP BY, чтобы ограничить группы возвращаемых строк только теми, чье условие Правда. 
[ORDER BY <список сортировки>[ ASC | DESC ]] используется для сортировки записей в вашем результирующем наборе. ASC - сортировка по возрастанию, DESC  - сортировка по убыванию.
[LIMIT <количество_строк>] задает ограниченное количество строк в результирующем наборе. 

Встроенные функции
CONCAT Позволяет объединять вместе два или более выражений.
LOWER Преобразует все символы указанной строки в строчные (нижний регистр).
UPPER Преобразует все символы указанной строки в верхний регистр.	
ABS Возвращает абсолютное значение числа.	
GREATEST Возвращает наибольшее значение в списке выражений.	
LEAST Возвращает наименьшее значение в списке выражений.	
ROUND Возвращает число, округленное до определенного количества десятичных знаков.	
CURDATE Возвращает текущую дату.
DAY Возвращает номер дня месяца из даты.
MONTH Возвращает числовое значение месяца из даты.
DATEDIFF Возвращает число дней между двумя датами.
YEAR Возвращает год из значения даты.
ISNULL Проверяет, является ли выражение NULL.
IF(условие, значение_если_True, значение_если_False) Возвращает одно значение.
COALESCE Возвращает первое не NULL выражение в списке.

Агрегатные функции - выполняют вычисления над группой значений из нескольких строк.
Cкалярные функции - выполняют вычисления над одним значением или списком значений.

HAVING 
Используется в сочетании с оператором GROUP BY, чтобы ограничить группы возвращаемых строк только теми, чье условие TRUE.

Операторы для объединения множеств бывают такие:
UNION / UNION ALL используется для объединения наборов данных двух и более предложений. UNION  удаляет повторяющиеся строки между различными предложениями.
INTERSECT используется для получения строк, которые одинаковы в объединяемых наборах данных.
MINUS используется для возврата всех строк первого запроса, не возвращаемых вторым 

Объединение таблиц
Способы: 1. INNER JOIN - Этот тип соединения возвращает только те строки, где условие соединения выполняется (является истинным, т.е. TRUE).
2. LEFT/RIGHT (OUTER) JOIN - Данное соединение позволяет извлекать данные из таблицы, дополняя их по возможности данными из другой таблицы. 
3. FULL (OUTER) JOIN - Нужен для выборки всех строк из таблицы, которая идёт перед оператором JOIN (слева) и всех строк из таблицы после оператора JOIN (справа). 
4. CROSS JOIN - Нужен для получения объединения каждой строки одной таблицы с каждой строкой другой таблицы (декартово множество или произведение). 

SQL- подзапрос
Это SELECT-запрос, вложенный в другой запрос или подзапрос, обернутый в круглые скобки ( ). Подзапросами пользуются, когда нужно использовать результат выполнения одного запроса в следующем (внешнем) запросе.
Оператор EXISTS возвращает true, если подзапрос возвращает одну, или более записей, в противном случае, возвращает false.

VIEW хранится в базе в виде запроса(SELECT), и только лишь при обращении к VIEW запускается этот самый запрос и возвращается результирующий набор данных.
WITH Обобщённое табличное выражение или CTE (Common Table Expressions) - это временный результирующий набор данных, к которому можно обращаться (и не один раз) в последующих запросах. 

LENGTH(строка) - возвращает длину строки в байтах
TRIM(строка) - удаляет пробелы из строки в начале и конце строки. 
! С помощью дополнительного оператора можно задать где именно удалить пробелы: BOTH FROM (в начале и в конце),  TRAILING FROM(только в конце), LEADING FROM(только в начале).

LOCATE(подстрока, строка [, нач. позиция]) - возвращает позицию первого вхождения подстроки в строку. Дополнительный параметр - нач. позиция - позволяет установить позицию в строке, с которой начинается поиск подстроки. Если подстрока не найдена, то возвращается 0.
